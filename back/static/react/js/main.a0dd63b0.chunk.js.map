{"version":3,"sources":["components/UI/Modal/Modal.js","components/UI/Form/Submit.js","components/UI/Form/Form.js","components/Login/Login.js","components/Channels/Channels.js","components/Messages/MessagesList.js","components/Messages/SendMessage.js","components/Messages/Messages.js","App.js","serviceWorker.js","index.js"],"names":["Background","props","className","children","Submit","type","onClick","submitHandler","submitText","Form","styles","color","label","placeholder","value","onChange","changeHandler","error","errorMessage","Login","setLogedIn","useState","username","setUsername","e","target","preventDefault","localStorage","clear","getItem","setItem","console","log","socket","io","Channels","channels","active","setActive","channelTitle","setChannelTitle","addChannel","setAddChannel","setError","setErrorMessage","deleteChannel","setDeleteChannel","id","map","room","key","includes","trim","emit","title","hide","MessagesList","messages","msg","connect","SendMessage","message","setMessage","onKeyPress","channel","author","date","Date","toLocaleTimeString","Messages","App","logedIn","setChannels","messagesData","setMessagesData","useEffect","on","data","array","filter","item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"js/main.a0dd63b0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./Modal.css\";\r\n\r\nconst Background = (props) => (\r\n  <div className=\"login-background\">\r\n    <div className=\"modal\">{props.children}</div>\r\n  </div>\r\n);\r\n\r\nexport default Background;\r\n","import React from \"react\";\r\n\r\nconst Submit = (props) => {\r\n  return (\r\n    <button type=\"submit\" onClick={props.submitHandler}>\r\n      {props.submitText}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Submit;\r\n","import React from \"react\";\r\n\r\nimport Submit from \"./Submit\";\r\n\r\nconst Form = (props) => {\r\n  return (\r\n    <form className=\"login\">\r\n      <label styles={{ color: \"black\" }}>{props.label}</label>\r\n      <input\r\n        placeholder={props.placeholder}\r\n        type=\"text\"\r\n        value={props.value}\r\n        onChange={props.changeHandler}\r\n      />\r\n      {props.error ? <p className=\"error\">{props.errorMessage}</p> : null}\r\n\r\n      <Submit\r\n        submitText={props.submitText}\r\n        submitHandler={props.submitHandler}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./Login.css\";\r\n\r\nimport Modal from \"../UI/Modal/Modal\";\r\nimport Form from \"../UI/Form/Form\";\r\n\r\nconst Login = ({ setLogedIn }) => {\r\n  const [username, setUsername] = useState(\"\");\r\n\r\n  const changeHandler = (e) => {\r\n    setUsername(e.target.value);\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    localStorage.clear();\r\n    const name = localStorage.getItem(\"username\");\r\n    if (name === null) {\r\n      localStorage.setItem(\"username\", username);\r\n      setLogedIn(true);\r\n    }\r\n    console.log(localStorage.getItem(\"username\"));\r\n  };\r\n\r\n  return (\r\n    <Modal>\r\n      <Form\r\n        label=\"Please enter your user name:\"\r\n        placeholder=\"Username\"\r\n        value={username}\r\n        changeHandler={changeHandler}\r\n        // error={error}\r\n        // errorMessage={errorMessage}\r\n        submitHandler={submitHandler}\r\n        submitText=\"Log In\"\r\n      />\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React, { useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nimport Form from \"../UI/Form/Form\";\r\nimport Modal from \"../UI/Modal/Modal\";\r\n\r\nconst socket = io();\r\n\r\nconst Channels = ({ channels, active, setActive }) => {\r\n  const [channelTitle, setChannelTitle] = useState(\"\");\r\n  const [addChannel, setAddChannel] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const [deleteChannel, setDeleteChannel] = useState(false);\r\n\r\n  const changeHandler = (e) => {\r\n    setChannelTitle(e.target.value);\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (channels.includes(channelTitle)) {\r\n      setError(true);\r\n      setErrorMessage(\"Channel already exists\");\r\n      console.log(\"already there\");\r\n    } else if (channelTitle.trim() === \"\") {\r\n      setError(true);\r\n      setErrorMessage(\"Please enter new channel title\");\r\n    } else {\r\n      setError(false);\r\n      setAddChannel(false);\r\n      console.log(channelTitle);\r\n      socket.emit(\"add channel\", { title: channelTitle });\r\n    }\r\n    setChannelTitle(\"\");\r\n  };\r\n\r\n  const hideModal = () => {\r\n    setAddChannel(false);\r\n  };\r\n\r\n  const showAddChannelForm = () => {\r\n    setAddChannel(!addChannel);\r\n  };\r\n\r\n  const selectChannel = (id) => {\r\n    console.log(id);\r\n    setActive(id);\r\n    localStorage.setItem(\"channel\", id);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    console.log(\"delete\");\r\n    setDeleteChannel(true);\r\n  };\r\n  const confirmDelete = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"deleted\");\r\n    console.log(channelTitle);\r\n    if (channels.includes(channelTitle)) {\r\n      setError(false);\r\n      console.log(\"contains\");\r\n      socket.emit(\"delete channel\", { title: channelTitle });\r\n      setDeleteChannel(false);\r\n    } else {\r\n      setError(true);\r\n      setErrorMessage(\"Can't delete channel that don't exist\");\r\n    }\r\n    setChannelTitle(\"\");\r\n  };\r\n\r\n  let attachClasses = \"active\";\r\n  return (\r\n    <>\r\n      <div className=\"channels glass\">\r\n        <div className=\"user\">\r\n          <h1>{localStorage.getItem(\"username\")}</h1>\r\n        </div>\r\n        <h3>\r\n          Channels{\"   \"}\r\n          <button className=\"channel-buttons\" onClick={showAddChannelForm}>\r\n            +\r\n          </button>\r\n          <button\r\n            type=\"submit\"\r\n            className=\"channel-buttons\"\r\n            onClick={handleDelete}\r\n          >\r\n            -\r\n          </button>\r\n        </h3>\r\n        <ul id=\"messsges\">\r\n          {channels.map((room) => (\r\n            <li\r\n              id={room}\r\n              key={room}\r\n              className={active === room ? attachClasses : null}\r\n              onClick={() => selectChannel(room)}\r\n            >\r\n              {room}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      {addChannel ? (\r\n        <Modal>\r\n          <Form\r\n            label=\"Please Enter new channel title\"\r\n            placeholder=\"Title\"\r\n            value={channelTitle}\r\n            changeHandler={changeHandler}\r\n            error={error}\r\n            errorMessage={errorMessage}\r\n            submitHandler={submitHandler}\r\n            submitText=\"Add\"\r\n          />\r\n        </Modal>\r\n      ) : null}\r\n      {deleteChannel ? (\r\n        <Modal hide={hideModal}>\r\n          <Form\r\n            label=\"Enter channel you want to delete\"\r\n            placeholder=\"Title\"\r\n            value={channelTitle}\r\n            changeHandler={changeHandler}\r\n            error={error}\r\n            errorMessage={errorMessage}\r\n            submitHandler={confirmDelete}\r\n            submitText=\"Delete\"\r\n          />\r\n        </Modal>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Channels;\r\n","import React, { useState } from \"react\";\r\n// import io from \"socket.io-client\";\r\n\r\n// const socket = io.connect();\r\n\r\nconst MessagesList = ({ messages }) => {\r\n  const [showDate, setShowDate] = useState(false);\r\n  const toggle = () => {\r\n    setShowDate(!showDate);\r\n  };\r\n\r\n  return (\r\n    <div className=\"messages-list\">\r\n      <div className=\"ul\">\r\n        {messages ? (\r\n          messages.map((msg) => (\r\n            <div\r\n              className={\r\n                msg[\"author\"] === localStorage.getItem(\"username\")\r\n                  ? \"li myMessage\"\r\n                  : \"li\"\r\n              }\r\n            >\r\n              <div>\r\n                {msg[\"message\"]}\r\n                <br />\r\n                <span className=\"author\">\r\n                  {msg[\"author\"]} {msg[\"date\"]}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <span>No messages yet</span>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MessagesList;\r\n","import React, { useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst socket = io.connect();\r\n\r\nconst SendMessage = () => {\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const changeHandler = (e) => {\r\n    setMessage(e.target.value);\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    if (message.trim() === \"\") {\r\n      console.log(\"no message\");\r\n    } else {\r\n      socket.emit(\"send message\", {\r\n        channel: localStorage.getItem(\"channel\"),\r\n        message: message,\r\n        author: localStorage.getItem(\"username\"),\r\n        date: new Date().toLocaleTimeString(),\r\n      });\r\n    }\r\n    setMessage(\"\");\r\n  };\r\n  const enterHandler = () => {\r\n    if (message.trim() === \"\") {\r\n      console.log(\"no message\");\r\n    } else {\r\n      socket.emit(\"send message\", {\r\n        channel: localStorage.getItem(\"channel\"),\r\n        message: message,\r\n        author: localStorage.getItem(\"username\"),\r\n        date: new Date().toLocaleTimeString(),\r\n      });\r\n    }\r\n    setMessage(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"send-message\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"New Message\"\r\n        value={message}\r\n        onChange={changeHandler}\r\n        onKeyPress={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            enterHandler();\r\n          }\r\n        }}\r\n      />\r\n      <button type=\"submit\" onClick={submitHandler}>\r\n        Send\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SendMessage;\r\n","import React from \"react\";\r\n\r\nimport MessagesList from \"./MessagesList\";\r\nimport SendMessage from \"./SendMessage\";\r\n// import Loading from \"../UI/Loading/Loading\";\r\n\r\nconst Messages = ({ messages }) => {\r\n  return (\r\n    <div className=\"messages\">\r\n      <MessagesList messages={messages} />\r\n      <SendMessage />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nimport \"./App.css\";\n\nimport Login from \"./components/Login/Login\";\nimport Channels from \"./components/Channels/Channels\";\nimport Messages from \"./components/Messages/Messages\";\n\nconst socket = io.connect();\n\nfunction App() {\n  const [logedIn, setLogedIn] = useState(true);\n  const [channels, setChannels] = useState([]);\n  const [messagesData, setMessagesData] = useState([]);\n  const [active, setActive] = useState(\"General\");\n\n  useEffect(() => {\n    console.log(localStorage.getItem(\"username\"));\n    if (localStorage.getItem(\"username\") === null) {\n      console.log(\"user is not loged in\");\n      setLogedIn(false);\n    }\n  }, []);\n  useEffect(() => {\n    socket.emit(\"get channels\", \"HI\");\n    socket.emit(\"get messeges\", active);\n    setActive(localStorage.getItem(\"channel\"));\n  }, []);\n  useEffect(() => {\n    socket.emit(\"get messeges\", active);\n  }, [active]);\n\n  socket.on(\"channels\", (data) => {\n    setChannels([...data]);\n  });\n  socket.on(\"messeges\", (data) => {\n    setMessagesData([...data]);\n  });\n\n  socket.on(\"channel added\", (data) => {\n    let title = data[\"channel\"];\n    setChannels([...channels, title]);\n  });\n  socket.on(\"channel deleted\", (data) => {\n    let title = data[\"channel\"];\n    let array = channels.filter((item) => {\n      return item !== title;\n    });\n    setChannels(array);\n  });\n\n  socket.on(\"send\", (data) => {\n    let channel = data[\"channel\"];\n    let author = data[\"author\"];\n    let message = data[\"message\"];\n    let date = data[\"date\"];\n\n    setMessagesData([...messagesData, { message, author, date }]);\n  });\n\n  return (\n    <div className=\"App\">\n      <Messages messages={messagesData} active={active} />\n      <Channels channels={channels} active={active} setActive={setActive} />\n      {logedIn ? null : <Login setLogedIn={setLogedIn} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./styles/styles.css\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}